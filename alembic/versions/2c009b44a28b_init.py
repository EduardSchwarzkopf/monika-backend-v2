"""init

Revision ID: 2c009b44a28b
Revises: 
Create Date: 2022-02-25 12:23:41.047775

"""
from alembic import op
import sqlalchemy as sa
from app.events import create_categories

# revision identifiers, used by Alembic.
revision = "2c009b44a28b"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "frequencies",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("name", sa.String(length=36), nullable=True),
        sa.Column("label", sa.String(length=36), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "transactions_categories",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("label", sa.String(length=36), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "users",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("username", sa.String(length=64), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("password", sa.String(), nullable=False),
        sa.Column("last_seen", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
        sa.UniqueConstraint("username"),
    )
    op.create_table(
        "accounts",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("label", sa.String(length=36), nullable=True),
        sa.Column("description", sa.String(length=128), nullable=True),
        sa.Column(
            "balance", sa.Numeric(precision=10, scale=2, asdecimal=False), nullable=True
        ),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "transactions_subcategories",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("user_id", sa.Integer(), nullable=True),
        sa.Column("label", sa.String(length=36), nullable=True),
        sa.Column("is_income", sa.Boolean(), nullable=True),
        sa.Column("parent_category_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["parent_category_id"],
            ["transactions_categories.id"],
        ),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "transactions_information",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "amount", sa.Numeric(precision=10, scale=2, asdecimal=False), nullable=True
        ),
        sa.Column("reference", sa.String(length=128), nullable=True),
        sa.Column("date", sa.DateTime(), nullable=True),
        sa.Column("subcategory_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["subcategory_id"],
            ["transactions_subcategories.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "transactions",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("account_id", sa.Integer(), nullable=True),
        sa.Column("information_id", sa.Integer(), nullable=True),
        sa.Column("offset_transactions_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["account_id"],
            ["accounts.id"],
        ),
        sa.ForeignKeyConstraint(
            ["information_id"],
            ["transactions_information.id"],
        ),
        sa.ForeignKeyConstraint(
            ["offset_transactions_id"],
            ["transactions.id"],
            name="transactions_offset_transactions_id_fkey",
            use_alter=True,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "transactions_scheduled",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("account_id", sa.Integer(), nullable=True),
        sa.Column("information_id", sa.Integer(), nullable=True),
        sa.Column("frequency_id", sa.Integer(), nullable=True),
        sa.Column("interval", sa.Integer(), nullable=True),
        sa.Column("date_start", sa.DateTime(), nullable=True),
        sa.Column("date_end", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["account_id"],
            ["accounts.id"],
        ),
        sa.ForeignKeyConstraint(
            ["frequency_id"], ["frequencies.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["information_id"],
            ["transactions_information.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###

    create_categories()


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("transactions_scheduled")
    op.drop_table("transactions")
    op.drop_table("transactions_information")
    op.drop_table("transactions_subcategories")
    op.drop_table("accounts")
    op.drop_table("users")
    op.drop_table("transactions_categories")
    op.drop_table("frequencies")
    # ### end Alembic commands ###
