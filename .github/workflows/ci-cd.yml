name: CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  IMAGE: ${{ secrets.DOCKER_USERNAME }}/pecuny:latest
  TEST_DB_NAME: test_db
  TEST_DB_PASSWORD: postgres
  TEST_DB_HOST: localhost
  TEST_DB_USER: postgres
  POETRY_VERSION: 1.7.1
  PYTHON_VERSION: 3.12

jobs:
  lint:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Run image
        uses: abatilo/actions-poetry@v3.0.0
        with:
          poetry-version: ${{ env.POETRY_VERSION }}
      - name: Install the linter dependencies
        run: poetry install --only linter
      - name: Run pylint
        run: poetry run pylint $(git ls-files '*.py')

  test:
    runs-on: ubuntu-22.04
    services:
      db:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: ${{ env.TEST_DB_USER }}
          POSTGRES_PASSWORD: ${{ env.TEST_DB_PASSWORD }}
          POSTGRES_DB: ${{ env.TEST_DB_NAME }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s 
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Run image
        uses: abatilo/actions-poetry@v3.0.0
        with:
          poetry-version: ${{ env.POETRY_VERSION }}
      - name: Install the linter dependencies
        run: poetry install
      - name: Run Tests
        run: "poetry run pytest --disable-warnings -x -v"
        env:
          ENVIRONMENT: "test"
          DOMAIN: "http://127.0.0.1:8000"
          SECRET_KEY: "test"
          CSRF_SECRET: "test"
          SESSION_SECRET_KEY: "test"
          ALGORITHM: ${{ vars.ALGORITHM }}
          ACCESS_TOKEN_EXPIRE_MINUTES: 30
          DB_NAME: ${{ env.TEST_DB_NAME }}
          DB_PASSWORD: ${{ env.TEST_DB_PASSWORD }}
          DB_HOST: "127.0.0.1"
          DB_PORT: 5432
          TEST_DB_PORT: 5432
          DB_USER: ${{ env.TEST_DB_USER }}
          MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
          MAIL_FROM: ${{ secrets.MAIL_FROM }}
          MAIL_SERVER: ${{ secrets.MAIL_SERVER }}
          MAIL_PORT: ${{ secrets.MAIL_PORT }}
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}

  build-and-publish:
    needs: [lint, test]
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: build docker image
        run: docker build --tag=${{ env.IMAGE }} .
      - name: login to container registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: publish docker image
        run: docker push ${{ env.IMAGE }}

  deploy:
    needs: [build-and-publish]
    runs-on: ubuntu-22.04
    env:
      SSH_HOST: webserver
      CONTAINER: pecuny
      SSH_CMD: ssh -o "StrictHostKeyChecking=no"
    steps:
      - uses: actions/checkout@v3
      - name: create ssh dir
        run: mkdir --parents ~/.ssh
      - name: create ssh key
        run: |
          set -e
          echo '${{ secrets.SSH_KEY }}' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
      - name: config ssh
        run: echo -e 'Host ${{ env.SSH_HOST }}\n  HostName ${{ vars.HOSTNAME }}\n  Port 22\n  User root\n  IdentityFile ~/.ssh/id_rsa' > ~/.ssh/config
      - name: stop pecuny
        run: "${{ env.SSH_CMD }} ${{ env.SSH_HOST }} docker rm --force ${{ env.CONTAINER }} || :"
      - name: pull latest image
        run: ${{ env.SSH_CMD }} ${{ env.SSH_HOST }} docker pull ${{ env.IMAGE }}
      - name: create .env file
        run: |
          set -e
          echo 'ENVIRONMENT=${{ vars.ENVIRONMENT }}' >> .env
          echo 'DOMAIN=${{ vars.DOMAIN }}' >> .env
          echo 'SECRET_KEY=${{ secrets.SECRET_KEY }}' >> .env
          echo 'CSRF_SECRET=${{ secrets.CSRF_SECRET_KEY }}' >> .env
          echo 'SESSION_SECRET_KEY=${{ secrets.SESSION_SECRET_KEY }}' >> .env
          echo 'ALGORITHM=${{ vars.ALGORITHM }}' >> .env
          echo 'ACCESS_TOKEN_EXPIRE_MINUTES=${{ vars.ACCESS_TOKEN_EXPIRE_MINUTES }}' >> .env
          echo 'DB_NAME=${{ secrets.DB_NAME }}' >> .env
          echo 'DB_PASSWORD=${{ secrets.DB_PASSWORD }}' >> .env
          echo 'DB_HOST=${{ secrets.DB_HOST }}' >> .env
          echo 'DB_PORT=${{ secrets.DB_PORT }}' >> .env
          echo 'DB_USER=${{ secrets.DB_USER }}' >> .env
          echo 'MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}' >> .env
          echo 'MAIL_FROM=${{ secrets.MAIL_FROM }}' >> .env
          echo 'MAIL_SERVER=${{ secrets.MAIL_SERVER }}' >> .env
          echo 'MAIL_PORT=${{ secrets.MAIL_PORT }}' >> .env
          echo 'MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}' >> .env
      - name: copy .env file
        run: scp -o "StrictHostKeyChecking=no" .env ${{ env.SSH_HOST }}:.env
      - name: pecuny start
        run: ${{ env.SSH_CMD }} ${{ env.SSH_HOST }} docker run -d --name ${{ env.CONTAINER }} -p ${{ vars.PORT }}:8000 --env-file .env ${{ env.IMAGE }}
      - name: upgrade database
        run: ${{ env.SSH_CMD }} ${{ env.SSH_HOST }} docker exec ${{ env.CONTAINER }} alembic upgrade head
