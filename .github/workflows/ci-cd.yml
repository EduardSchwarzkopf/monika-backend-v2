name: CI/CD

on:
    push:
        branches: ["main"]

env:
    IMAGE: ${{ secrets.DOCKER_USERNAME }}/monika-backend:latest

jobs:
    build-and-publish:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
            - name: build docker image
              run: docker build --tag=${{ env.IMAGE }} .
            - name: login to container registry
              uses: docker/login-action@v2
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_TOKEN }}
            - name: publish docker image
              run: docker push ${{ env.IMAGE }}

    deploy:
        needs: [build-and-publish]
        runs-on: ubuntu-latest
        env:
            SSH_HOST: webserver
            CONTAINER: monika
            SSH_CMD: ssh -o "StrictHostKeyChecking=no"
        steps:
            - uses: actions/checkout@v3
            - name: create ssh dir
              run: mkdir --parents ~/.ssh
            - name: create ssh key
              run: |
                  set -e
                  echo '${{ secrets.SSH_KEY }}' > ~/.ssh/id_rsa
                  chmod 600 ~/.ssh/id_rsa
            - name: config ssh
              run: echo -e 'Host ${{ env.SSH_HOST }}\n  HostName ${{ vars.HOSTNAME }}\n  Port 22\n  User root\n  IdentityFile ~/.ssh/id_rsa' > ~/.ssh/config
            - name: stop old containers
              run: "${{ env.SSH_CMD }} ${{ env.SSH_HOST }}  docker-compose down || :"
            - name: copy docker-compose.yml
              run: scp -o "StrictHostKeyChecking=no" docker-compose.yml ${{ env.SSH_HOST }}:docker-compose.yml
            - name: create .env file
              run: |
                  echo IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/monika-backend:latest >> .env
                  echo ENVIRONMENT=${{ vars.ENVIRONMENT }} >> .env
                  echo DB_USER=${{ secrets.DB_USER }} >> .env
                  echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env
                  echo DB_NAME=${{ secrets.DB_NAME }} >> .env
                  echo DB_PORT=${{ secrets.DB_PORT }} >> .env
                  echo TEST_DB_PORT=${{ secrets.TEST_DB_PORT }} >> .env
                  echo DB_HOST=postgres >> .env
                  echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
                  echo ALGORITHM=${{ vars.ALGORITHM }} >> .env
                  echo ACCESS_TOKEN_EXPIRE_MINUTES=${{ vars.ACCESS_TOKEN_EXPIRE_MINUTES }} >> .env
                  echo DB_NAME=${{ secrets.DB_NAME }} >> .env
                  echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env
                  echo DB_PORT=${{ secrets.DB_PORT }} >> .env
                  echo DB_USER=${{ secrets.DB_USER }} >> .env
                  echo DB_USERNAME=${{ secrets.DB_USER }} >> .env
                  echo MAIL_USERNAME=${{ vars.MAIL_USERNAME }} >> .env
                  echo MAIL_FROM=${{ vars.MAIL_FROM }} >> .env
                  echo MAIL_SERVER=${{ vars.MAIL_SERVER }} >> .env
                  echo MAIL_PORT=${{ vars.MAIL_PORT }} >> .env
                  echo MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }} >> .env
            - name: copy .env file
              run: scp -o "StrictHostKeyChecking=no" .env ${{ env.SSH_HOST }}:.env
            - name: apply docker-compose
              run: ${{ env.SSH_CMD }} ${{ env.SSH_HOST }} docker compose pull && docker compose --profile prod up -d
