name: CI

on:
  pull_request:
    branches:
      - main
  workflow_call:
    inputs:
      python_version:
        description: "Python version"
        type: string
        required: false
      poetry_version:
        description: "Poetry version"
        type: string
        required: false

env:
  TEST_DB_NAME: test_db
  TEST_DB_PASSWORD: postgres
  TEST_DB_HOST: localhost
  TEST_DB_USER: postgres
  PYTHON_VERSION: ${{ inputs.python_version || '3.12' }}
  POETRY_VERSION: ${{ inputs.poetry_version || '1.7.1' }}

jobs:
  lint:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Run image
        uses: abatilo/actions-poetry@v3.0.0
        with:
          poetry-version: ${{ env.POETRY_VERSION }}
      - name: Install Dependencies
        run: poetry install --with linter
      - name: Run linter
        run: poetry run pylint $(git ls-files '*.py')

  test:
    runs-on: ubuntu-22.04
    services:
      db:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: ${{ env.TEST_DB_USER }}
          POSTGRES_PASSWORD: ${{ env.TEST_DB_PASSWORD }}
          POSTGRES_DB: ${{ env.TEST_DB_NAME }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s 
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Run image
        uses: abatilo/actions-poetry@v3.0.0
        with:
          poetry-version: ${{ env.POETRY_VERSION }}
      - name: Install Dependencies
        run: poetry install
      - name: create .env file
        run: |
          set -e
          echo 'ENVIRONMENT=${{ vars.ENVIRONMENT }}' >> .env
          echo 'DOMAIN=${{ vars.DOMAIN }}' >> .env
          echo 'SECRET_KEY=${{ secrets.SECRET_KEY }}' >> .env
          echo 'CSRF_SECRET=${{ secrets.CSRF_SECRET_KEY }}' >> .env
          echo 'SESSION_SECRET_KEY=${{ secrets.SESSION_SECRET_KEY }}' >> .env
          echo 'ACCESS_TOKEN_EXPIRE_MINUTES=${{ vars.ACCESS_TOKEN_EXPIRE_MINUTES }}' >> .env
          echo 'TEST_DB_PORT=5432' >> .env
          echo 'TEST_DB_NAME=${{ env.TEST_DB_NAME }}' >> .env
          echo 'DB_NAME=${{ secrets.DB_NAME }}' >> .env
          echo 'DB_PASSWORD=${{ secrets.DB_PASSWORD }}' >> .env
          echo 'DB_HOST=${{ secrets.DB_HOST }}' >> .env
          echo 'DB_PORT=${{ secrets.DB_PORT }}' >> .env
          echo 'DB_USER=${{ secrets.DB_USER }}' >> .env
          echo 'MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}' >> .env
          echo 'MAIL_FROM=${{ secrets.MAIL_FROM }}' >> .env
          echo 'MAIL_SERVER=${{ secrets.MAIL_SERVER }}' >> .env
          echo 'MAIL_PORT=${{ secrets.MAIL_PORT }}' >> .env
          echo 'MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}' >> .env
      - name: Run Tests
        run: poetry run pytest --disable-warnings -x -v
